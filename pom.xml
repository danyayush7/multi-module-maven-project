<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>org.learn.maven</groupId>
  <artifactId>multi-module-project</artifactId>
  <packaging>pom</packaging> <!--packaging will be jar if project don't contain modules -->
  <version>1.0-SNAPSHOT</version>
  <name>multi-module-project</name>
  <url>http://maven.apache.org</url>

  <properties>
    <mysql_version>8.0.19</mysql_version>
  </properties>
  <modules>
    <module>sub-module2</module>
    <module>sub-module1</module>
  </modules>

  <dependencies>
    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
      <version>4.13.1</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>${sql_version}</version>
        <scope>runtime</scope>
      </dependency>
    </dependencies>
  </dependencyManagement>


  <build>
    <sourceDirectory>src/main/java</sourceDirectory>
    <plugins>
      <plugin>
        <artifactId>maven-compiler-plugin</artifactId>   <!-- to complie java project with version 1.8 | btw its not needed as compile is by default in maven lifecycle-->
        <version>3.6.1</version>
        <configuration>
          <source>1.8</source>
          <target>1.8</target>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>   <!-- to search mainClass in project-->
        <version>1.5.0</version>
        <configuration>
          <mainClass>fully.qualified.MainClass</mainClass>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>  <!-- to make executable jar containing class files + external classes used in project | not to be used for sub-modules pom-->
        <artifactId>maven-assembly-plugin</artifactId>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>single</goal>
            </goals>
            <configuration>
              <archive>
                <manifest>
                  <addClasspath>true</addClasspath>
                  <mainClass>
                    fully.qualified.MainClass   <!-- if project has multiple main classes otherwise only main class name-->
                  </mainClass>
                </manifest>
              </archive>
              <descriptorRefs>
                <descriptorRef>jar-with-dependencies</descriptorRef>
              </descriptorRefs>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>   <!--to make jar containing class files of this module | not to be used for sub-modules pom-->
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifest>
              <addClasspath>true</addClasspath>
              <mainClass>fully.qualified.MainClass</mainClass>   <!-- if project has multiple main classes otherwise only main class name-->
            </manifest>
          </archive>
        </configuration>
      </plugin>

      <plugin>
      <artifactId>maven-resources-plugin</artifactId>    <!--refer to https://www.baeldung.com/maven-resources-plugin -->
      <version>3.1.0</version>
      <executions>
        <execution>
          <id>copy-resources</id>
          <phase>package</phase>
          <goals>
            <goal>copy-resources</goal>
          </goals>
          <configuration>
            <outputDirectory>${basedir}/target/resources</outputDirectory>   <!--${basedir} contains artifact-id -->
            <resources>
              <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>    <!--used to fill placeholder values-->
              </resource>
            </resources>
          </configuration>
        </execution>
      </executions>
      </plugin>

      <plugin>   <!--this plugin generates XML reports of tests run in the directory target/surefire-reports-->
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.22.2</version>   <!--urefire automatically includes all test classes whose name starts with Test, or ends with Test, Tests or TestCase-->
        <configuration>
          <excludes>
            <exclude>DataTest.java</exclude>
          </excludes>
          <includes>
            <include>DataCheck.java</include>
          </includes>
        </configuration>
      </plugin>

      <plugin>    <!--f the output-resources directory contains some generated resources, it cannot be removed with the default clean plugin in super-pom-->
        <artifactId>maven-clean-plugin</artifactId>
        <version>3.0.0</version>
        <configuration>
          <filesets>
            <fileset>
              <directory>output-resources</directory>
            </fileset>
          </filesets>
        </configuration>
      </plugin>

      <plugin>   <!--to be able to update version of external jar to be used-->
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>versions-maven-plugin</artifactId>
        <version>2.7</version>
        <configuration>
          <excludes>   <!-- jars not to be updated-->
            <exclude>org.apache.commons:commons-collections4</exclude>
          </excludes>
        </configuration>
      </plugin>

        <plugin>   <!-- to incorporate multiple source directories in maven project -->
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
                <execution>
                    <phase>generate-sources</phase>
                    <goals>
                        <goal>add-source</goal>
                    </goals>
                    <configuration>
                        <sources>
                            <source>src/main/anotherSrc1</source>
                            <source>src/main/anotherSrc2</source>
                        </sources>
                    </configuration>
                </execution>
            </executions>
        </plugin>

    </plugins>
  </build>

</project>
